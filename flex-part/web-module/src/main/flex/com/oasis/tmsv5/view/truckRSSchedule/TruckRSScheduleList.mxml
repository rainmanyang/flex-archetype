<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:fb="http://flexbase.800best.com/mxml"
		 xmlns:flexlib="http://code.google.com/p/flexlib/"
		 width="100%" height="100%"  creationComplete="init()" xmlns:controls="flexlib.controls.*" xmlns:route="com.oasis.tmsv5.view.route.*"
		 xmlns:truckRSSchedule="com.oasis.tmsv5.view.truckRSSchedule.*" xmlns:grid="com.oasis.component.grid.*" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:PremissionButton="com.oasis.component.PremissionButton.*"
		 >
	<mx:Script>
		<![CDATA[
			import com.best.oasis.flexbase.components.grid.columnRender.CopyableDataGridItemRenderer;
			
			import mx.utils.URLUtil;
			
			import com.oasis.component.page.PageList;
			import com.oasis.tmsv5.truckRSSchedule.TruckRSScheduleController;
			import com.oasis.tmsv5.utils.Constants;
			import com.oasis.tmsv5.view.popup.RouteDialog;
			import com.oasis.tmsv5.view.report.ReportDownloadMsgDialog;
			import com.oasis.wolfburg.enum.EnumManage;
			import com.oasis.wolfburg.so.truckRSSchedule.TruckRSScheduleSO;
			import com.oasis.wolfburg.vo.route.Route;
			import com.oasis.wolfburg.vo.truckRSSchedule.TruckRSSchedule;
			
			import mx.collections.ArrayCollection;
			import mx.containers.ViewStack;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			
			[Bindable]
			public var dp:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var pageList:PageList = new PageList();
			
			[Bindable]
			public var so:TruckRSScheduleSO = new TruckRSScheduleSO();
			
			[Inject]
			public var truckRSScheduleController:TruckRSScheduleController;
			
			[Bindable]
			public var statusArray:ArrayCollection = EnumManage.getRSScheduleStatus();
			
			public var host:String;

			public function init():void{
				//grid.dataProvider = dp;
				getPageData(so.pageNumber, so.objectsPerPage);
			};
			
			protected function onMenuChange(event:MenuEvent):void {
				var parent:ViewStack = this.parent as ViewStack;
				parent.selectedIndex = event.item.index;
			}
			
			private function getPageData(pageNum:int, pageSize:int,callBack:Function=null):void{
				if(statusId.selectedItem != null){
					so.status = statusId.selectedItem.data;
				}
				so.pageNumber = pageNum;
				so.objectsPerPage = pageSize;
				truckRSScheduleController.getPageList(so, pageList,callBack);
			}
			[EventHandler( event="TruckRSScheduleEvent.TRUCK_RS_SCHEDULE_LIST_EVENT" )]
			public function search():void{
				so.pageNumber=1;
				getPageData(so.pageNumber,so.objectsPerPage);
			}
			
			
			protected function itemClickHandle(event:ListEvent):void{
				var itemRenderer:CopyableDataGridItemRenderer = event.itemRenderer as CopyableDataGridItemRenderer;
				var vo:TruckRSSchedule = itemRenderer.data as TruckRSSchedule
				truckRSScheduleController.find(vo,function():void{
					freshViewForm(vo);
				});
				
			}
			
			private function freshViewForm(truckRSSchedule:TruckRSSchedule):void{
				view.vo = truckRSSchedule;
				view.displayText();
				rightPanel.selectedIndex=0;
			}
			protected function create_clickHandler():void
			{
				rightPanel.selectedIndex = 1;
			}
			
			private function getStatus(item:Object,column:DataGridColumn):String{
				var status:String = item.status as String;
				return EnumManage.getDisplayText(status,statusArray);
			}
			
			private function publish_clickHandler():void{
				var ids:ArrayCollection = new ArrayCollection();
				for each(var o:Object in grid.selectedItems){
					var ts:TruckRSSchedule = TruckRSSchedule(o);
					ids.addItem(ts.id);
				}
				if(ids.length == 0){
					Alert.show("请选择要发布的对象!");
					return ;
				}else{
					if(ids.length == 1){
						var vo:TruckRSSchedule = grid.selectedItem as TruckRSSchedule;
						if(vo.status == 'PUBLISH' || vo.status=='CLOSED'){
							Alert.show("请选择新建的班车,进行发布操作!");
							return ;
						}
					}
					
					Alert.show("您确认要发布选中的数据？","确认发布",Alert.YES|Alert.NO,null, 
						function(closeEvent:CloseEvent):void{
							if (closeEvent.detail==Alert.YES){
								truckRSScheduleController.updateStatus(ids,search);
							}
						});
				}
			}
			
			private function close_clickHandler():void{
				var len:int = grid.selectedItems.length;
				if(len == 0){
					Alert.show("请选择要停用的班车!");
					return ;
				}else if(len > 1){
					Alert.show("请选择单条班车记录,进行停用操作!");
					return ;
				}else if (grid.selectedItem.status == EnumManage.RSScheduleStatus3.data){
					Alert.show("此班车时刻表已停用!");
					return ;
				}
				else{
					var vo:TruckRSSchedule = grid.selectedItem as TruckRSSchedule;
					if(vo.status == 'NEW' || vo.status=='CLOSED'){
						Alert.show("请选择已发布的班车,进行停用操作!");
						return ;
					}
					var time:Date = new Date();
					var df:DateFormatter = new DateFormatter();
					df.formatString = "YYYY-MM-DD";
					var msg:String = "停用选中的班车,将会删除"+df.format(time)+"及以后所有运输任务单,请确认？";
					Alert.show(msg,"确认停用",Alert.YES|Alert.NO,null, 
						function(closeEvent:CloseEvent):void{
							if (closeEvent.detail==Alert.YES){
								truckRSScheduleController.close(vo,search);
							}
						});
				}
			}
			private function open_clickHandler():void{
				var len:int = grid.selectedItems.length;
				if(len == 0){
					Alert.show("请选择要启用的班车!");
					return ;
				}else if(len > 1){
					Alert.show("请选择单条班车记录,进行启用操作!");
					return ;
				}else if (grid.selectedItem.status == EnumManage.RSScheduleStatus2.data){
					Alert.show("此班车时刻表不是停用状态!");
					return ;
				}
				else{
					var vo:TruckRSSchedule = grid.selectedItem as TruckRSSchedule;
					if(vo.status == 'NEW' || vo.status=='PUBLISH'){
						Alert.show("请选择已停用的班车,进行启用操作!");
						return ;
					}
					var time:Date = new Date();
					var df:DateFormatter = new DateFormatter();
					df.formatString = "YYYY-MM-DD";
					var msg:String = "启用选中的班车,请确认？";
					Alert.show(msg,"确认启用",Alert.YES|Alert.NO,null, 
						function(closeEvent:CloseEvent):void{
							if (closeEvent.detail==Alert.YES){
								truckRSScheduleController.open(vo,search);
							}
						});
				}
			}
			
			protected function getRoute():void {
				var dialog:RouteDialog = 
					RouteDialog(PopUpManager.createPopUp(root, RouteDialog , true));
				dialog.passFun = routeLocalFun;
				PopUpManager.centerPopUp(dialog);
			}
			
			public function routeLocalFun(item:Object):void{
				var route:Route = item as Route;
				so.routeName = route.name;
				so.routeId = route.id;
			}
			
			public function chgRoute():void{
				so.routeId = NaN;
			}
			
			public function clearRoute():void{
				so.routeName = "";
				so.routeId = NaN;
			}
			
			private function getRequestURL():String{
				var url:String = FlexGlobals.topLevelApplication.url;
				var fullUrl:String = URLUtil.getFullURL(url, url);
				var serverNameWithPort:String = URLUtil.getServerNameWithPort(url);
				var sdex:int = fullUrl.indexOf(serverNameWithPort);
				sdex = fullUrl.indexOf("/",sdex);
				host = fullUrl.substr(0,sdex);
				return host;
			}
			
			private function export():void{
				so.pageNumber = 1;
				so.objectsPerPage = int.MAX_VALUE;
				if(statusId.selectedItem != null){
					so.status = statusId.selectedItem.data;
				}
				var dialog:ReportDownloadMsgDialog = ReportDownloadMsgDialog(PopUpManager.createPopUp(root, ReportDownloadMsgDialog, true));
				PopUpManager.centerPopUp(dialog);
				dialog.truckRSScheduleSO = so;
				so.requestUrl = getRequestURL();
				dialog.reportType=Constants.TRUCKRS_SCHEDULE;
				dialog.init();
			}
		]]>
	</mx:Script>
	<mx:HDividedBox width="100%" height="100%">
		<mx:VBox width="45%" height="95%">
			<flexlib:WindowShade id="ws1"
								 tabChildren="{ws1.opened}"
								 styleName="linkButtonWindowShade"
								 label="搜索"
								 width="100%">
				<mx:HBox  width="100%" borderStyle="solid">
					<fb:MultiColumnForm  numColumns="1" width="60%" defaultButton="{searchBtn}">
						<fb:MultiColumnFormItem label="班次号" >
							<mx:TextInput id="strName" text="@{so.name}"/>
						</fb:MultiColumnFormItem>
						<fb:MultiColumnFormItem label="线路名称：">
							<fb:SelectableTextInput id="routeName" dataChange="chgRoute()" textInputEditable="true" text="@{so.routeName}" searchButtonClick="getRoute" clearButtonClick="clearRoute"/>
						</fb:MultiColumnFormItem>
						<fb:MultiColumnFormItem label="状态：">
							<s:DropDownList dataProvider="{statusArray}" id="statusId" selectedIndex="0"/>
						</fb:MultiColumnFormItem>
						<mx:HBox width="100%">  
							<mx:Spacer width="100%"/>
							<fb:MultiColumnFormItem>
									<mx:Button label="查询" click="search();" id="searchBtn"/>
							</fb:MultiColumnFormItem>
						</mx:HBox>
					</fb:MultiColumnForm>
				</mx:HBox>
		</flexlib:WindowShade>
		<mx:HBox paddingLeft="30">
			<PremissionButton:PremissionButton label="新建" id="create" click="create_clickHandler()" module="TruckRS" premission="create"/>
			<PremissionButton:PremissionButton label="发布" click="publish_clickHandler()" module="TruckRS" premission="publish"/>
			<PremissionButton:PremissionButton label="启用" click="open_clickHandler()" module="TruckRS" premission="enable"/>
			<PremissionButton:PremissionButton label="停用" click="close_clickHandler()" module="TruckRS" premission="disable"/>
			<PremissionButton:PremissionButton label="导出" click="export()" module="TruckRS" premission="export"/>
		</mx:HBox>
		<grid:PageableDataGrid id="grid" dataProvider="{pageList.list}" width="100%"
							   getPageData="getPageData"  currentPageNum="{so.pageNumber}" totalItemNum="{pageList.fullListSize}"
							   pageSize="{so.objectsPerPage}"
							   height="100%" allowMultipleSelection="true" itemClick="itemClickHandle(event)" showControlColumn="false">
			<grid:columns >
				<grid:DataGridColumnNested headerText="班次号" dataField="name" width="80"/>
				<grid:DataGridColumnNested headerText="线路名称" dataField="routeName"/>
				<grid:DataGridColumnNested headerText="出发时间" dataField="departureTime" width="80"/>
				<grid:DataGridColumnNested headerText="到达时间" dataField="arrivalTime" width="80"/>
				<grid:DataGridColumnNested headerText="状态" labelFunction="getStatus" width="60"/>
			</grid:columns>
			
		</grid:PageableDataGrid>
		</mx:VBox>
		<mx:ViewStack id="rightPanel" selectedIndex="0" width="55%" height="100%" creationPolicy="all">
			<truckRSSchedule:TruckRSScheduleView  id="view"/>
			<truckRSSchedule:TruckRSScheduleCreate/>
			<truckRSSchedule:TruckRSScheduleEdit id="edit"/>
		</mx:ViewStack>
	</mx:HDividedBox>
</mx:VBox>
